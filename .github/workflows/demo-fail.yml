name: Fail Job with Notification
on:
  push:
    branches:
      - main
jobs:
  fail-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Force failure
        run: |
          echo "Simulating failure..."
          echo "This is a debug message before failure" >&2
          exit 1
        id: failure-step
      
      - name: Capture logs
        if: always()
        run: |
          echo "Capturing logs..."
          {
            echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
            echo "GITHUB_ACTION: $GITHUB_ACTION"
            echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
            echo "GITHUB_SHA: $GITHUB_SHA"
            echo "GITHUB_REF: $GITHUB_REF"
            echo "Step outputs:"
            echo "${{ toJson(steps) }}"
          } > job_logs.txt
      
      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: job-logs
          path: job_logs.txt
  
  failure-notification:
    runs-on: ubuntu-latest
    needs: fail-job
    if: always()
    steps:
      - name: Download logs artifact
        uses: actions/download-artifact@v3
        with:
          name: job-logs
      
      - name: Process logs and send notification
        run: |
          LOGS=$(cat job_logs.txt)
          echo "Logs content (first 500 characters):"
          echo "${LOGS:0:500}"
          
          # Truncate logs to 2000 characters
          TRUNCATED_LOGS="${LOGS:0:2000}..."
          ESCAPED_LOGS=$(echo "$TRUNCATED_LOGS" | jq -sRr @json)
          
          # Prepare payload with metadata
          PAYLOAD=$(jq -n \
                      --arg status "${{ job.status }}" \
                      --arg repo "$GITHUB_REPOSITORY" \
                      --arg workflow "$GITHUB_WORKFLOW" \
                      --arg commit "$GITHUB_SHA" \
                      --arg logs "$ESCAPED_LOGS" \
                      '{status: $status, repository: $repo, workflow: $workflow, commit: $commit, logs: $logs}')
          
          echo "Payload size (bytes):"
          echo -n "$PAYLOAD" | wc -c
          
          # Function to send webhook with retry logic
          send_webhook() {
            for i in {1..3}; do
              HTTP_RESPONSE=$(curl -s -o response.txt -w "%{http_code}" -X POST -H "Content-Type: application/json" \
                -d "$PAYLOAD" \
                https://webhooksource-kubiya.hooks.kubiya.ai:8443/NFg08dN_1RNBZ-MP4M5fClwTEuCcyFoDttLQTj8xgOnSCbtqLPhuVfHkWnvXiKXlroILiWVL237h2yuyBeg7KA==)
              
              if [ "$HTTP_RESPONSE" -eq 204 ]; then
                echo "Webhook sent successfully"
                echo "Response body:"
                cat response.txt
                return 0
              fi
              
              echo "Attempt $i failed with HTTP status $HTTP_RESPONSE. Retrying in 5 seconds..."
              sleep 5
            done
            
            echo "All attempts to send webhook failed"
            return 1
          }
          
          # Send webhook
          if send_webhook; then
            echo "Notification sent successfully"
          else
            echo "Failed to send notification"
            exit 1
          fi